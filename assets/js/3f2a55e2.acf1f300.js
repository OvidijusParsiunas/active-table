"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[437],{5162:(e,t,a)=>{a.d(t,{Z:()=>l});var n=a(7294),r=a(6010);const o={tabItem:"tabItem_Ymn6"};function l(e){let{children:t,hidden:a,className:l}=e;return n.createElement("div",{role:"tabpanel",className:(0,r.Z)(o.tabItem,l),hidden:a},t)}},4866:(e,t,a)=>{a.d(t,{Z:()=>N});var n=a(7462),r=a(7294),o=a(6010),l=a(2466),i=a(6550),s=a(1980),p=a(7392),d=a(12);function m(e){return function(e){var t;return(null==(t=r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})))?void 0:t.filter(Boolean))??[]}(e).map((e=>{let{props:{value:t,label:a,attributes:n,default:r}}=e;return{value:t,label:a,attributes:n,default:r}}))}function u(e){const{values:t,children:a}=e;return(0,r.useMemo)((()=>{const e=t??m(a);return function(e){const t=(0,p.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,a])}function x(e){let{value:t,tabValues:a}=e;return a.some((e=>e.value===t))}function c(e){let{queryString:t=!1,groupId:a}=e;const n=(0,i.k6)(),o=function(e){let{queryString:t=!1,groupId:a}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:t,groupId:a});return[(0,s._X)(o),(0,r.useCallback)((e=>{if(!o)return;const t=new URLSearchParams(n.location.search);t.set(o,e),n.replace({...n.location,search:t.toString()})}),[o,n])]}function b(e){const{defaultValue:t,queryString:a=!1,groupId:n}=e,o=u(e),[l,i]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!x({value:t,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${a.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const n=a.find((e=>e.default))??a[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:t,tabValues:o}))),[s,p]=c({queryString:a,groupId:n}),[m,b]=function(e){let{groupId:t}=e;const a=function(e){return e?`docusaurus.tab.${e}`:null}(t),[n,o]=(0,d.Nk)(a);return[n,(0,r.useCallback)((e=>{a&&o.set(e)}),[a,o])]}({groupId:n}),f=(()=>{const e=s??m;return x({value:e,tabValues:o})?e:null})();(0,r.useLayoutEffect)((()=>{f&&i(f)}),[f]);return{selectedValue:l,selectValue:(0,r.useCallback)((e=>{if(!x({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);i(e),p(e),b(e)}),[p,b,o]),tabValues:o}}var f=a(2389);const h={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function k(e){let{className:t,block:a,selectedValue:i,selectValue:s,tabValues:p}=e;const d=[],{blockElementScrollPositionUntilNextRender:m}=(0,l.o5)(),u=e=>{const t=e.currentTarget,a=d.indexOf(t),n=p[a].value;n!==i&&(m(t),s(n))},x=e=>{var t;let a=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{const t=d.indexOf(e.currentTarget)+1;a=d[t]??d[0];break}case"ArrowLeft":{const t=d.indexOf(e.currentTarget)-1;a=d[t]??d[d.length-1];break}}null==(t=a)||t.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":a},t)},p.map((e=>{let{value:t,label:a,attributes:l}=e;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:i===t?0:-1,"aria-selected":i===t,key:t,ref:e=>d.push(e),onKeyDown:x,onClick:u},l,{className:(0,o.Z)("tabs__item",h.tabItem,null==l?void 0:l.className,{"tabs__item--active":i===t})}),a??t)})))}function v(e){let{lazy:t,children:a,selectedValue:n}=e;const o=(Array.isArray(a)?a:[a]).filter(Boolean);if(t){const e=o.find((e=>e.props.value===n));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},o.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==n}))))}function y(e){const t=b(e);return r.createElement("div",{className:(0,o.Z)("tabs-container",h.tabList)},r.createElement(k,(0,n.Z)({},e,t)),r.createElement(v,(0,n.Z)({},e,t)))}function N(e){const t=(0,f.Z)();return r.createElement(y,(0,n.Z)({key:String(t)},e))}},7537:(e,t,a)=>{function n(){window.XLSX||a.e(105).then(a.bind(a,4105)).then((e=>{window.XLSX=e}))}a.d(t,{D:()=>n})},9814:(e,t,a)=>{a.d(t,{Z:()=>r});var n=a(7294);function r(){return n.createElement("div",{style:{height:"1px"}})}},1853:(e,t,a)=>{function n(e){window.scrollY>0?e.style.boxShadow="0 1px 2px 0 rgb(0 0 0 / 10%)":e.style.boxShadow="unset"}function r(){setTimeout((()=>{window.removeEventListener("scroll",window.toggleNavOnScroll);const e=document.getElementsByClassName("navbar--fixed-top");if(e[0]){const t=e[0];n(t),window.toggleNavOnScroll=n.bind(this,t),window.addEventListener("scroll",window.toggleNavOnScroll)}}),2)}function o(){setTimeout((()=>{var e;const t=null==(e=document.querySelectorAll(".plugin-pages > body > #__docusaurus > nav"))?void 0:e[0];try{t.classList.add("fade-in")}catch(a){console.error(a),console.log("element was not rendered in time - use MutationObserver")}}),2)}a.r(t),a.d(t,{fadeIn:()=>o,readdAutoNavShadowToggle:()=>r})},9272:(e,t,a)=>{a.d(t,{Z:()=>o,v:()=>r});var n=a(7294);function r(e){var t;return null==e||null==(t=e.children[0])?void 0:t.children[0]}function o(e){let{children:t,minHeight:a}=e;return n.createElement("div",{className:"documentation-example-container",style:{minHeight:`${a||343}px`}},n.createElement("div",null,t))}},5034:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>u,default:()=>k,frontMatter:()=>m,metadata:()=>x,toc:()=>b});var n=a(7462),r=(a(7294),a(3905)),o=a(4336),l=a(9272),i=a(9814),s=a(1262),p=a(5162),d=a(4866);const m={sidebar_position:10},u="Files",x={unversionedId:"docs/files",id:"docs/files",title:"Files",description:"Active Table supports the following file formats: csv, xls, xlsx, ods, txt. You can import or export files via the use of buttons,",source:"@site/docs/docs/files.mdx",sourceDirName:"docs",slug:"/docs/files",permalink:"/docs/files",draft:!1,editUrl:"https://github.com/OvidijusParsiunas/active-table/tree/main/website/docs/docs/files.mdx",tags:[],version:"current",sidebarPosition:10,frontMatter:{sidebar_position:10},sidebar:"docs",previous:{title:"Filter",permalink:"/docs/filter"},next:{title:"Methods",permalink:"/docs/methods"}},c={},b=[{value:"<code>files</code>",id:"files",level:3},{value:"Types",id:"types",level:2},{value:"<code>FileButton</code>",id:"FileButton",level:3},{value:"Example",id:"example",level:4},{value:"<code>DragAndDrop</code>",id:"DragAndDrop",level:3},{value:"Example",id:"example-1",level:4},{value:"<code>ImportOptions</code>",id:"ImportOptions",level:3},{value:"Example",id:"example-2",level:4},{value:"<code>ImportOverwriteOptions</code>",id:"ImportOverwriteOptions",level:3},{value:"Example",id:"example-3",level:4},{value:"<code>ExportOptions</code>",id:"ExportOptions",level:3},{value:"Example",id:"example-4",level:4},{value:"<code>FileFormat</code>",id:"FileFormat",level:3}],f={toc:b},h="wrapper";function k(e){let{components:t,...m}=e;return(0,r.kt)(h,(0,n.Z)({},f,m,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"files"},"Files"),(0,r.kt)("p",null,"Active Table supports the following file formats: ",(0,r.kt)("inlineCode",{parentName:"p"},"csv"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"xls"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"xlsx"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"ods"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"txt"),". You can import or export files via the use of ",(0,r.kt)("a",{parentName:"p",href:"#FileButton"},"buttons"),",\n",(0,r.kt)("a",{parentName:"p",href:"/docs/methods#importCSV"},"methods")," or using ",(0,r.kt)("a",{parentName:"p",href:"#DragAndDrop"},"drag and drop"),". You can additionally copy data from an external spreadsheet and paste it into the table directly."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"csv")," is supported natively, however if you are using any of the other file formats - you will need to add the ",(0,r.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/xlsx"},(0,r.kt)("inlineCode",{parentName:"a"},"xlsx"))," module\ninto your project. Please see examples ",(0,r.kt)("a",{parentName:"p",href:"../examples/files"},"here"),".")),(0,r.kt)(i.Z,{mdxType:"LineBreak"}),(0,r.kt)("h3",{id:"files"},(0,r.kt)("inlineCode",{parentName:"h3"},"files")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Type: {",(0,r.kt)("a",{parentName:"li",href:"#FileButton"},(0,r.kt)("inlineCode",{parentName:"a"},"buttons?: FileButton[]")),", ",(0,r.kt)("a",{parentName:"li",href:"#DragAndDrop"},(0,r.kt)("inlineCode",{parentName:"a"},"dragAndDrop: boolean | DragAndDrop")),"}"),(0,r.kt)("li",{parentName:"ul"},"Default: ",(0,r.kt)("em",{parentName:"li"},"{buttons: [], dragAndDrop: false}"))),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"buttons")," is an array containing button definitions. ",(0,r.kt)("br",null),"\n",(0,r.kt)("inlineCode",{parentName:"p"},"dragAndDrop")," is used to configure the drag and drop functionality. If any of the ",(0,r.kt)("inlineCode",{parentName:"p"},"buttons")," use the ",(0,r.kt)("a",{parentName:"p",href:"#FileButton"},(0,r.kt)("inlineCode",{parentName:"a"},"import"))," property, it automatically defaults to ",(0,r.kt)("em",{parentName:"p"},"true"),". ",(0,r.kt)("br",null)),(0,r.kt)(s.Z,{mdxType:"BrowserOnly"},(()=>a(1853).readdAutoNavShadowToggle())),(0,r.kt)(s.Z,{mdxType:"BrowserOnly"},(()=>a(7537).D())),(0,r.kt)(l.Z,{minHeight:"381",mdxType:"TableContainer"},(0,r.kt)(o.Z,{files:{buttons:[{import:!0},{export:!0}],dragAndDrop:!0},data:[["Planet","Diameter","Mass","Moons","Density"],["Earth",12756,5.97,1,5514],["Mars",6792,.642,2,3934],["Jupiter",142984,1898,79,1326],["Saturn",120536,568,82,687],["Neptune",49528,102,14,1638]],tableStyle:{width:"100%",boxShadow:"rgb(172 172 172 / 17%) 0px 0.5px 1px 0px",borderRadius:"2px"},mdxType:"ActiveTable"})),(0,r.kt)(d.Z,{mdxType:"Tabs"},(0,r.kt)(p.Z,{value:"js",label:"Sample code",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'<active-table files=\'{"buttons": [{"import": true}, {"export": true}], "dragAndDrop": true}\'></active-table>\n'))),(0,r.kt)(p.Z,{value:"py",label:"Full code",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'\x3c!-- This example is for Vanilla JS and should be tailored to your framework (see Examples) --\x3e\n\x3c!-- If you are using file formats other than csv, import the \'xlsx\' module (see Files Examples) --\x3e\n\n<active-table\n  files=\'{"buttons": [{"import": true}, {"export": true}], "dragAndDrop": true}\'\n  data=\'[\n      ["Planet", "Diameter", "Mass", "Moons", "Density"],\n      ["Earth", 12756, 5.97, 1, 5514],\n      ["Mars", 6792, 0.642, 2, 3934],\n      ["Jupiter", 142984, 1898, 79, 1326],\n      ["Saturn", 120536, 568, 82, 687],\n      ["Neptune", 49528, 102, 14, 1638]]\'\n  tableStyle=\'{"width":"100%", "boxShadow": "rgb(172 172 172 / 17%) 0px 0.5px 1px 0px", "borderRadius":"2px"}\'\n></active-table>\n')))),(0,r.kt)(i.Z,{mdxType:"LineBreak"}),(0,r.kt)("h2",{id:"types"},"Types"),(0,r.kt)("p",null,"Object types for properties inside ",(0,r.kt)("a",{parentName:"p",href:"#files"},(0,r.kt)("inlineCode",{parentName:"a"},"files")),":"),(0,r.kt)("h3",{id:"FileButton"},(0,r.kt)("inlineCode",{parentName:"h3"},"FileButton")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Type: {",(0,r.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,r.kt)("a",{parentName:"li",href:"#ImportOptions"},(0,r.kt)("inlineCode",{parentName:"a"},"import: true | ImportOptions")),", ",(0,r.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,r.kt)("a",{parentName:"li",href:"#ExportOptions"},(0,r.kt)("inlineCode",{parentName:"a"},"export: true | ExportOptions")),", ",(0,r.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,r.kt)("inlineCode",{parentName:"li"},"text?: string"),", ",(0,r.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,r.kt)("a",{parentName:"li",href:"/docs/sharedTypes#StatefulCSS"},(0,r.kt)("inlineCode",{parentName:"a"},"styles?: StatefulCSS")),", ",(0,r.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,r.kt)("a",{parentName:"li",href:"/docs/sharedTypes#OuterContentPosition"},(0,r.kt)("inlineCode",{parentName:"a"},"position?: OuterContentPosition")),", ",(0,r.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,r.kt)("inlineCode",{parentName:"li"},"order?: number")," ",(0,r.kt)("br",null),"\n}"),(0,r.kt)("li",{parentName:"ul"},"Default: {",(0,r.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,r.kt)("em",{parentName:"li"},'text: "Import"|"Export"'),", ",(0,r.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,r.kt)("em",{parentName:"li"},'position: "bottom-left"'),", ",(0,r.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,r.kt)("em",{parentName:"li"},"order: 0")," ",(0,r.kt)("br",null),"\n}")),(0,r.kt)("p",null,"This object requires either the ",(0,r.kt)("inlineCode",{parentName:"p"},"import")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"export")," properties to be defined. ",(0,r.kt)("br",null),"\n",(0,r.kt)("inlineCode",{parentName:"p"},"text")," is the text that is displayed on the button. ",(0,r.kt)("br",null),"\n",(0,r.kt)("inlineCode",{parentName:"p"},"styles")," is the definition of button style for various mouse events. ",(0,r.kt)("br",null),"\n",(0,r.kt)("inlineCode",{parentName:"p"},"position")," is the location of the button. ",(0,r.kt)("br",null),"\n",(0,r.kt)("inlineCode",{parentName:"p"},"order")," is the order of the button when multiple other components are also placed in the same position."),(0,r.kt)("h4",{id:"example"},"Example"),(0,r.kt)(l.Z,{minHeight:"382",mdxType:"TableContainer"},(0,r.kt)(o.Z,{files:{buttons:[{import:!0,styles:{default:{backgroundColor:"#46acff",height:"19px",padding:"7px 14px",color:"white",border:"unset"},hover:{backgroundColor:"#2b9cf8"},click:{backgroundColor:"#198eef"}},text:"Import File",position:"top-left",order:1},{export:!0,styles:{default:{backgroundColor:"#46acff",height:"19px",padding:"7px 14px",color:"white",border:"unset"},hover:{backgroundColor:"#2b9cf8"},click:{backgroundColor:"#198eef"}},text:"Export File",position:"top-left",order:0}]},data:[["Planet","Diameter","Mass","Moons","Density"],["Earth",12756,5.97,1,5514],["Mars",6792,.642,2,3934],["Jupiter",142984,1898,79,1326],["Saturn",120536,568,82,687],["Neptune",49528,102,14,1638]],tableStyle:{width:"100%",boxShadow:"rgb(172 172 172 / 17%) 0px 0.5px 1px 0px",borderRadius:"2px"},mdxType:"ActiveTable"})),(0,r.kt)(d.Z,{mdxType:"Tabs"},(0,r.kt)(p.Z,{value:"js",label:"Sample code",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'<active-table\n  files=\'{\n    "buttons": [\n      {\n        "import": true,\n        "styles": {\n          "default": {\n            "backgroundColor": "#46acff", "height": "19px", "padding": "7px 14px", "color": "white", "border": "unset"\n          },\n          "hover": {"backgroundColor": "#2b9cf8"}, "click": {"backgroundColor": "#198eef"}\n        },\n        "text": "Import File",\n        "position": "top-left",\n        "order": 1\n      },\n      {\n        "export": true,\n        "styles": {\n          "default": {\n            "backgroundColor": "#46acff", "height": "19px", "padding": "7px 14px", "color": "white", "border": "unset"\n          },\n          "hover": {"backgroundColor": "#2b9cf8"}, "click": {"backgroundColor": "#198eef"}\n        },\n        "text": "Export File",\n        "position": "top-left",\n        "order": 0\n      }\n    ]}\'\n></active-table>\n'))),(0,r.kt)(p.Z,{value:"py",label:"Full code",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'\x3c!-- This example is for Vanilla JS and should be tailored to your framework (see Examples) --\x3e\n\x3c!-- If you are using file formats other than csv, import the \'xlsx\' module (see Files Examples) --\x3e\n\n<active-table\n  files=\'{\n    "buttons": [\n      {\n        "import": true,\n        "styles": {\n          "default": {\n            "backgroundColor": "#46acff", "height": "19px", "padding": "7px 14px", "color": "white", "border": "unset"\n          },\n          "hover": {"backgroundColor": "#2b9cf8"}, "click": {"backgroundColor": "#198eef"}\n        },\n        "text": "Import File",\n        "position": "top-left",\n        "order": 1\n      },\n      {\n        "export": true,\n        "styles": {\n          "default": {\n            "backgroundColor": "#46acff", "height": "19px", "padding": "7px 14px", "color": "white", "border": "unset"\n          },\n          "hover": {"backgroundColor": "#2b9cf8"}, "click": {"backgroundColor": "#198eef"}\n        },\n        "text": "Export File",\n        "position": "top-left",\n        "order": 0\n      }\n  ]}\'\n  data=\'[\n    ["Planet", "Diameter", "Mass", "Moons", "Density"],\n    ["Earth", 12756, 5.97, 1, 5514],\n    ["Mars", 6792, 0.642, 2, 3934],\n    ["Jupiter", 142984, 1898, 79, 1326],\n    ["Saturn", 120536, 568, 82, 687],\n    ["Neptune", 49528, 102, 14, 1638]]\'\n  tableStyle=\'{"width":"100%", "boxShadow": "rgb(172 172 172 / 17%) 0px 0.5px 1px 0px", "borderRadius":"2px"}\'\n></active-table>\n')))),(0,r.kt)(i.Z,{mdxType:"LineBreak"}),(0,r.kt)("h3",{id:"DragAndDrop"},(0,r.kt)("inlineCode",{parentName:"h3"},"DragAndDrop")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Type: {",(0,r.kt)("a",{parentName:"li",href:"/docs/sharedTypes#CSSStyle"},(0,r.kt)("inlineCode",{parentName:"a"},"overlayStyle?: CSSStyle")),"} & ",(0,r.kt)("a",{parentName:"li",href:"#ImportOptions"},(0,r.kt)("inlineCode",{parentName:"a"},"ImportOptions")))),(0,r.kt)("p",null,"Configuration for the drag and drop functionality. ",(0,r.kt)("br",null),"\n",(0,r.kt)("inlineCode",{parentName:"p"},"overlayStyle")," is used to customise the overlay element that is displayed when a file is dragged over the table. ",(0,r.kt)("br",null),"\nIf the ",(0,r.kt)("a",{parentName:"p",href:"#ImportOptions"},(0,r.kt)("inlineCode",{parentName:"a"},"formats"))," array inside ",(0,r.kt)("inlineCode",{parentName:"p"},"ImportOptions")," is not set or is empty, it will automatically use all formats defined in the import buttons\n(if there are two import buttons where one accepts ",(0,r.kt)("em",{parentName:"p"},'"csv"')," and another accepts ",(0,r.kt)("em",{parentName:"p"},'"xlsx"'),", the result will be ",(0,r.kt)("em",{parentName:"p"},'["csv", "xlsx"]'),"), however if there\nare no import buttons this property will be set to ",(0,r.kt)("em",{parentName:"p"},'["csv"]'),"."),(0,r.kt)("h4",{id:"example-1"},"Example"),(0,r.kt)(l.Z,{minHeight:"343",mdxType:"TableContainer"},(0,r.kt)(o.Z,{files:{dragAndDrop:{overlayStyle:{backgroundColor:"#80ff704d",border:"5px dashed #52c360"},formats:["csv","xlsx"],overwriteOptions:{importRowStartIndex:1,tableRowStartIndex:1}}},data:[["Planet","Diameter","Mass","Moons","Density"],["Earth",12756,5.97,1,5514],["Mars",6792,.642,2,3934],["Jupiter",142984,1898,79,1326],["Saturn",120536,568,82,687],["Neptune",49528,102,14,1638]],tableStyle:{width:"100%",boxShadow:"rgb(172 172 172 / 17%) 0px 0.5px 1px 0px",borderRadius:"2px"},mdxType:"ActiveTable"})),(0,r.kt)(d.Z,{mdxType:"Tabs"},(0,r.kt)(p.Z,{value:"js",label:"Sample code",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'<active-table\n  files=\'{\n    "dragAndDrop": {\n      "overlayStyle": {"backgroundColor": "#80ff704d", "border": "5px dashed #52c360"},\n      "formats": ["csv", "xlsx"],\n      "overwriteOptions": {"importRowStartIndex": 1, "tableRowStartIndex": 1}\n  }}\'\n></active-table>\n'))),(0,r.kt)(p.Z,{value:"py",label:"Full code",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'\x3c!-- This example is for Vanilla JS and should be tailored to your framework (see Examples) --\x3e\n\x3c!-- If you are using file formats other than csv (like in the example), import the \'xlsx\' module (see Files Examples) --\x3e\n\n<active-table\n  files=\'{\n    "dragAndDrop": {\n      "overlayStyle": {"backgroundColor": "#80ff704d", "border": "5px dashed #52c360"},\n      "formats": ["csv", "xlsx"],\n      "overwriteOptions": {"importRowStartIndex": 1, "tableRowStartIndex": 1}\n  }}\'\n  data=\'[\n    ["Planet", "Diameter", "Mass", "Moons", "Density"],\n    ["Earth", 12756, 5.97, 1, 5514],\n    ["Mars", 6792, 0.642, 2, 3934],\n    ["Jupiter", 142984, 1898, 79, 1326],\n    ["Saturn", 120536, 568, 82, 687],\n    ["Neptune", 49528, 102, 14, 1638]]\'\n  tableStyle=\'{"width":"100%", "boxShadow": "rgb(172 172 172 / 17%) 0px 0.5px 1px 0px", "borderRadius":"2px"}\'\n></active-table>\n')))),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"The overlay will appear for any file format as the component cannot inspect the file that is being dragged, but it will not process\nfile formats that are not in the ",(0,r.kt)("a",{parentName:"p",href:"#ImportOptions"},(0,r.kt)("inlineCode",{parentName:"a"},"formats"))," array after they are dropped.")),(0,r.kt)(i.Z,{mdxType:"LineBreak"}),(0,r.kt)("h3",{id:"ImportOptions"},(0,r.kt)("inlineCode",{parentName:"h3"},"ImportOptions")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Type: {",(0,r.kt)("a",{parentName:"li",href:"#FileFormat"},(0,r.kt)("inlineCode",{parentName:"a"},"formats?: FileFormat[]")),", ",(0,r.kt)("a",{parentName:"li",href:"#ImportOverwriteOptions"},(0,r.kt)("inlineCode",{parentName:"a"},"overwriteOptions?: ImportOverwriteOptions")),"}"),(0,r.kt)("li",{parentName:"ul"},"Default: {",(0,r.kt)("em",{parentName:"li"},"formats: ",'["csv"]'),"}")),(0,r.kt)("p",null,"Configuration for the importable files. ",(0,r.kt)("br",null),"\n",(0,r.kt)("inlineCode",{parentName:"p"},"formats")," are file extensions that are allowed to be imported. If the array is not set or is empty - it will default to ",(0,r.kt)("em",{parentName:"p"},'["csv"]'),". ",(0,r.kt)("br",null),"\n",(0,r.kt)("inlineCode",{parentName:"p"},"overwriteOptions")," defines the content that the imported file will overwrite."),(0,r.kt)("h4",{id:"example-2"},"Example"),(0,r.kt)(l.Z,{minHeight:"381",mdxType:"TableContainer"},(0,r.kt)(o.Z,{files:{buttons:[{import:{formats:["csv","ods","txt"],overwriteOptions:{importRowStartIndex:1,tableRowStartIndex:1}},text:"Import CSV ODS TXT"},{import:{formats:["xls","xlsx"],overwriteOptions:{importRowStartIndex:2,tableRowStartIndex:2}},text:"Import XLS XLSX"}]},data:[["Planet","Diameter","Mass","Moons","Density"],["Earth",12756,5.97,1,5514],["Mars",6792,.642,2,3934],["Jupiter",142984,1898,79,1326],["Saturn",120536,568,82,687],["Neptune",49528,102,14,1638]],tableStyle:{width:"100%",boxShadow:"rgb(172 172 172 / 17%) 0px 0.5px 1px 0px",borderRadius:"2px"},mdxType:"ActiveTable"})),(0,r.kt)(d.Z,{mdxType:"Tabs"},(0,r.kt)(p.Z,{value:"js",label:"Sample code",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'<active-table\n  files=\'{\n    "buttons": [\n      {\n        "import": {\n          "formats": ["csv", "ods", "txt"],\n          "overwriteOptions": {"importRowStartIndex": 1, "tableRowStartIndex": 1}\n        }\n      },\n      {\n        "import": {\n          "formats": ["xls", "xlsx"],\n          "overwriteOptions": {"importRowStartIndex": 2, "tableRowStartIndex": 2}\n        }\n      }\n  ]}\'\n></active-table>\n'))),(0,r.kt)(p.Z,{value:"py",label:"Full code",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'\x3c!-- This example is for Vanilla JS and should be tailored to your framework (see Examples) --\x3e\n\x3c!-- If you are using file formats other than csv (like in the example), import the \'xlsx\' module (see Files Examples) --\x3e\n\n<active-table\n  files=\'{\n    "buttons": [\n      {\n        "import": {\n          "formats": ["csv", "ods", "txt"],\n          "overwriteOptions": {"importRowStartIndex": 1, "tableRowStartIndex": 1}\n        },\n        "text": "Import CSV ODS TXT"\n      },\n      {\n        "import": {\n          "formats": ["xls", "xlsx"],\n          "overwriteOptions": {"importRowStartIndex": 2, "tableRowStartIndex": 2}\n        },\n        "text": "Import XLS XLSX"\n      }\n  ]}\'\n  data=\'[\n    ["Planet", "Diameter", "Mass", "Moons", "Density"],\n    ["Earth", 12756, 5.97, 1, 5514],\n    ["Mars", 6792, 0.642, 2, 3934],\n    ["Jupiter", 142984, 1898, 79, 1326],\n    ["Saturn", 120536, 568, 82, 687],\n    ["Neptune", 49528, 102, 14, 1638]]\'\n  tableStyle=\'{"width":"100%", "boxShadow": "rgb(172 172 172 / 17%) 0px 0.5px 1px 0px", "borderRadius":"2px"}\'\n></active-table>\n')))),(0,r.kt)(i.Z,{mdxType:"LineBreak"}),(0,r.kt)("h3",{id:"ImportOverwriteOptions"},(0,r.kt)("inlineCode",{parentName:"h3"},"ImportOverwriteOptions")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Type: {",(0,r.kt)("inlineCode",{parentName:"li"},"importRowStartIndex?: number"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"tableRowStartIndex?: number"),"}"),(0,r.kt)("li",{parentName:"ul"},"Default: {",(0,r.kt)("em",{parentName:"li"},"importRowStartIndex: 0"),", ",(0,r.kt)("em",{parentName:"li"},"tableRowStartIndex: 0"),"}")),(0,r.kt)("p",null,"Configuration for defining which imported file's rows will be used to overwrite which table rows. Both properties\nuse zero based indexes where the first row is represented by 0. ",(0,r.kt)("br",null),"\n",(0,r.kt)("inlineCode",{parentName:"p"},"importRowStartIndex")," property is the imported file's starting row index that will be used to overwrite the table. E.g. a value of ",(0,r.kt)("em",{parentName:"p"},"1"),"\nindicates that it will only use rows below the header. ",(0,r.kt)("br",null),"\n",(0,r.kt)("inlineCode",{parentName:"p"},"tableRowStartIndex")," property marks the starting row of the data that will be completely removed and overwritten by the imported table rows. E.g. a value of ",(0,r.kt)("em",{parentName:"p"},"1"),"\nwill overwrite all of the rows below the header row. Use a value of ",(0,r.kt)("em",{parentName:"p"},"-1")," to append the incoming table rows after the last existing row of the table. ",(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"example-3"},"Example"),(0,r.kt)(l.Z,{minHeight:"381",mdxType:"TableContainer"},(0,r.kt)(o.Z,{files:{buttons:[{import:{overwriteOptions:{importRowStartIndex:1,tableRowStartIndex:-1}}}]},data:[["Planet","Diameter","Mass","Moons","Density"],["Earth",12756,5.97,1,5514],["Mars",6792,.642,2,3934],["Jupiter",142984,1898,79,1326],["Saturn",120536,568,82,687],["Neptune",49528,102,14,1638]],tableStyle:{width:"100%",boxShadow:"rgb(172 172 172 / 17%) 0px 0.5px 1px 0px",borderRadius:"2px"},mdxType:"ActiveTable"})),(0,r.kt)(d.Z,{mdxType:"Tabs"},(0,r.kt)(p.Z,{value:"js",label:"Sample code",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'<active-table\n  files=\'{"buttons": [{"import": {"overwriteOptions": {"importRowStartIndex": 1, "tableRowStartIndex": -1}}}]}\'\n></active-table>\n'))),(0,r.kt)(p.Z,{value:"py",label:"Full code",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'\x3c!-- This example is for Vanilla JS and should be tailored to your framework (see Examples) --\x3e\n\x3c!-- If you are using file formats other than csv (like in the example), import the \'xlsx\' module (see Files Examples) --\x3e\n\n<active-table\n  files=\'{"buttons": [{"import": {"overwriteOptions": {"importRowStartIndex": 1, "tableRowStartIndex": -1}}}]}\'\n  data=\'[\n    ["Planet", "Diameter", "Mass", "Moons", "Density"],\n    ["Earth", 12756, 5.97, 1, 5514],\n    ["Mars", 6792, 0.642, 2, 3934],\n    ["Jupiter", 142984, 1898, 79, 1326],\n    ["Saturn", 120536, 568, 82, 687],\n    ["Neptune", 49528, 102, 14, 1638]]\'\n  tableStyle=\'{"borderRadius":"2px"}\'\n></active-table>\n')))),(0,r.kt)(i.Z,{mdxType:"LineBreak"}),(0,r.kt)("h3",{id:"ExportOptions"},(0,r.kt)("inlineCode",{parentName:"h3"},"ExportOptions")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Type: {fileName?: string, ",(0,r.kt)("a",{parentName:"li",href:"#FileFormat"},(0,r.kt)("inlineCode",{parentName:"a"},"formats?: FileFormat[]")),"}"),(0,r.kt)("li",{parentName:"ul"},"Default: ",(0,r.kt)("em",{parentName:"li"},'{fileName: "table_data", format: ','["csv"]',"}"))),(0,r.kt)("p",null,"Configuration for the exported ",(0,r.kt)("inlineCode",{parentName:"p"},"fileName")," and the available ",(0,r.kt)("inlineCode",{parentName:"p"},"formats")," that it can be exported with. ",(0,r.kt)("br",null),"\nWhen more than one format is defined - the button will use a dropdown to list each option."),(0,r.kt)("h4",{id:"example-4"},"Example"),(0,r.kt)(l.Z,{minHeight:"381",mdxType:"TableContainer"},(0,r.kt)(o.Z,{files:{buttons:[{export:{fileName:"example_csv",formats:["csv"]},text:"Export CSV"},{export:{fileName:"example_xls",formats:["xls"]},text:"Export XLS"},{export:{fileName:"example_xlsx",formats:["xlsx"]},text:"Export XLSX"},{export:{fileName:"example_ods",formats:["ods"]},text:"Export ODS"},{export:{fileName:"example_txt",formats:["txt"]},text:"Export TXT"},{export:{fileName:"example",formats:["csv","xls","xlsx","ods","txt"]},text:"Export"}]},data:[["Planet","Diameter","Mass","Moons","Density"],["Earth",12756,5.97,1,5514],["Mars",6792,.642,2,3934],["Jupiter",142984,1898,79,1326],["Saturn",120536,568,82,687],["Neptune",49528,102,14,1638]],tableStyle:{width:"100%",boxShadow:"rgb(172 172 172 / 17%) 0px 0.5px 1px 0px",borderRadius:"2px"},mdxType:"ActiveTable"})),(0,r.kt)(d.Z,{mdxType:"Tabs"},(0,r.kt)(p.Z,{value:"js",label:"Sample code",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'<active-table\n  files=\'{\n    "buttons": [\n      {"export": {"fileName": "example_csv", "formats": ["csv"]}},\n      {"export": {"fileName": "example_xls", "formats": ["xls"]}},\n      {"export": {"fileName": "example_xlsx", "formats": ["xlsx"]}},\n      {"export": {"fileName": "example_ods", "formats": ["ods"]}},\n      {"export": {"fileName": "example_txt", "formats": ["txt"]}},\n      {"export": {"fileName": "example", "formats": ["csv", "xls", "xlsx", "ods", "txt"]}}\n  ]}\'\n></active-table>\n'))),(0,r.kt)(p.Z,{value:"py",label:"Full code",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'\x3c!-- This example is for Vanilla JS and should be tailored to your framework (see Examples) --\x3e\n\x3c!-- If you are using file formats other than csv (like in the example), import the \'xlsx\' module (see Files Examples) --\x3e\n\n<active-table\n  files=\'{\n    "buttons": [\n      {"export": {"fileName": "example_csv", "formats": ["csv"]}, "text": "Export CSV"},\n      {"export": {"fileName": "example_xls", "formats": ["xls"]}, "text": "Export XLS"},\n      {"export": {"fileName": "example_xlsx", "formats": ["xlsx"]}, "text": "Export XLSX"},\n      {"export": {"fileName": "example_ods", "formats": ["ods"]}, "text": "Export ODS"},\n      {"export": {"fileName": "example_txt", "formats": ["txt"]}, "text": "Export TXT"},\n      {"export": {"fileName": "example", "formats": ["csv", "xls", "xlsx", "ods", "txt"]}}\n  ]}\'\n  data=\'[\n    ["Planet", "Diameter", "Mass", "Moons", "Density"],\n    ["Earth", 12756, 5.97, 1, 5514],\n    ["Mars", 6792, 0.642, 2, 3934],\n    ["Jupiter", 142984, 1898, 79, 1326],\n    ["Saturn", 120536, 568, 82, 687],\n    ["Neptune", 49528, 102, 14, 1638]]\'\n  tableStyle=\'{"width":"100%", "boxShadow": "rgb(172 172 172 / 17%) 0px 0.5px 1px 0px", "borderRadius":"2px"}\'\n></active-table>\n')))),(0,r.kt)(i.Z,{mdxType:"LineBreak"}),(0,r.kt)("h3",{id:"FileFormat"},(0,r.kt)("inlineCode",{parentName:"h3"},"FileFormat")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Type: ",(0,r.kt)("inlineCode",{parentName:"li"},'"csv"')," | ",(0,r.kt)("inlineCode",{parentName:"li"},'"xls"')," | ",(0,r.kt)("inlineCode",{parentName:"li"},'"xlsx"')," | ",(0,r.kt)("inlineCode",{parentName:"li"},'"ods"')," | ",(0,r.kt)("inlineCode",{parentName:"li"},'"txt"'))),(0,r.kt)("p",null,"File formats that can be imported into and exported out of Active Table."))}k.isMDXComponent=!0}}]);