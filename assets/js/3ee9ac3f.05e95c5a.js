"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[122],{3483:(e,t,n)=>{n.d(t,{Z:()=>l});var a=n(7294);function l(e){return e.data.map(((e,t)=>{const n=""===e?"":JSON.stringify(e);return a.createElement("div",{key:t},">"," ",n)}))}},9525:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>v,contentTitle:()=>x,default:()=>T,frontMatter:()=>h,metadata:()=>b,toc:()=>y});var a=n(7462),l=n(7294),o=n(3905),r=n(9272),i=n(3483);const d=l.forwardRef(((e,t)=>{const[n,a]=l.useState([""]);return l.useImperativeHandle(t,(()=>{const e=[];return{updateText:n=>{t.current&&(e.length>3&&e.pop(),e.unshift(n),a([...e]))}}})),l.createElement("div",null,"Latest events:",l.createElement(i.Z,{data:n}))}));function p(e){let{children:t,propertyname:n}=e;const a=l.useRef(null),o=l.useRef(null);if(a.current){const e=a.current;setTimeout((()=>{if(a.current&&o.current){(0,r.v)(a.current.children[0])[n]=o.current?.updateText}else{(0,r.v)(e.children[0])[n]=()=>{}}}))}return l.createElement("div",null,l.createElement("div",{ref:a},l.createElement(r.Z,null,t)),l.createElement("div",{className:"example-container"},l.createElement(d,{ref:o})))}var s=n(4336),m=n(9814),u=n(1262),c=n(5162),k=n(4866);const h={sidebar_position:12},x="Events",b={unversionedId:"events",id:"events",title:"Events",description:"Events can be observed in two ways, either by assigning a function to a property or by listening to custom events fired from the element.",source:"@site/docs/events.mdx",sourceDirName:".",slug:"/events",permalink:"/docs/events",draft:!1,editUrl:"https://github.com/OvidijusParsiunas/active-table/tree/main/website/docs/events.mdx",tags:[],version:"current",sidebarPosition:12,frontMatter:{sidebar_position:12},sidebar:"defaultSidebar",previous:{title:"Methods",permalink:"/docs/methods"},next:{title:"Shared types",permalink:"/docs/sharedTypes"}},v={},y=[{value:"<code>onCellUpdate</code>",id:"onCellUpdate",level:3},{value:"Example",id:"example",level:4},{value:"<code>onContentUpdate</code>",id:"onContentUpdate",level:3},{value:"Example",id:"example-1",level:4},{value:"<code>onColumnsUpdate</code>",id:"onColumnsUpdate",level:3},{value:"Example",id:"example-2",level:4}],N={toc:y},C="wrapper";function T(e){let{components:t,...l}=e;return(0,o.kt)(C,(0,a.Z)({},N,l,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"events"},"Events"),(0,o.kt)("p",null,"Events can be observed in two ways, either by assigning a function to a property or by listening to custom events fired from the element."),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"Take care not to re-render the component when using event information to update parent state.")),(0,o.kt)("h3",{id:"onCellUpdate"},(0,o.kt)("inlineCode",{parentName:"h3"},"onCellUpdate")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Function: (",(0,o.kt)("inlineCode",{parentName:"li"},"cellUpdate:")," ",(0,o.kt)("inlineCode",{parentName:"li"},"Body"),") => ",(0,o.kt)("inlineCode",{parentName:"li"},"void")),(0,o.kt)("li",{parentName:"ul"},"Event: ",(0,o.kt)("inlineCode",{parentName:"li"},"cell-update")),(0,o.kt)("li",{parentName:"ul"},"Body: { ",(0,o.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,o.kt)("inlineCode",{parentName:"li"},"text: string"),", ",(0,o.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,o.kt)("inlineCode",{parentName:"li"},"rowIndex: number"),", ",(0,o.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,o.kt)("inlineCode",{parentName:"li"},"columnIndex: number"),", ",(0,o.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,o.kt)("inlineCode",{parentName:"li"},'updateType: "add"|"update"|"remove"')," ",(0,o.kt)("br",null),"\n}")),(0,o.kt)("p",null,"Triggered when any content within the table has changed. Both ",(0,o.kt)("inlineCode",{parentName:"p"},"rowIndex")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"columnIndex")," begin at ",(0,o.kt)("em",{parentName:"p"},"0"),"\nwhere it is the header row for ",(0,o.kt)("inlineCode",{parentName:"p"},"rowIndex")," and the left-most column for ",(0,o.kt)("inlineCode",{parentName:"p"},"columnIndex"),"."),(0,o.kt)("h4",{id:"example"},"Example"),(0,o.kt)(u.Z,{mdxType:"BrowserOnly"},(()=>n(9875).readdAutoNavToggle())),(0,o.kt)(p,{propertyname:"onCellUpdate",mdxType:"TableContainerEvents"},(0,o.kt)(s.Z,{content:[["Planet","Diameter","Mass","Moons","Density"],["Earth",12756,5.97,1,5514],["Mars",6792,.642,2,3934],["Jupiter",142984,1898,79,1326],["Saturn",120536,568,82,687],["Neptune",49528,102,14,1638]],tableStyle:{width:"100%",boxShadow:"rgb(172 172 172 / 17%) 0px 0.5px 1px 0px",borderRadius:"2px"},mdxType:"ActiveTable"})),(0,o.kt)(k.Z,{mdxType:"Tabs"},(0,o.kt)(c.Z,{value:"js",label:"Function",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-html"},"tableElementRef.onCellUpdate = (cellUpdate) => { console.log(cellUpdate); });\n"))),(0,o.kt)(c.Z,{value:"py",label:"Event",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-html"},"\x3c!-- This example is for Vanilla JS and should be tailored to your framework (see Examples) --\x3e\n\ntableElementRef.addEventListener('cell-update', (cellUpdate) => { console.log(cellUpdate.detail); });\n")))),(0,o.kt)(m.Z,{mdxType:"LineBreak"}),(0,o.kt)("h3",{id:"onContentUpdate"},(0,o.kt)("inlineCode",{parentName:"h3"},"onContentUpdate")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Function: (",(0,o.kt)("inlineCode",{parentName:"li"},"contentUpdate:")," ",(0,o.kt)("inlineCode",{parentName:"li"},"Body"),") => ",(0,o.kt)("inlineCode",{parentName:"li"},"void")),(0,o.kt)("li",{parentName:"ul"},"Event: ",(0,o.kt)("inlineCode",{parentName:"li"},"content-update")),(0,o.kt)("li",{parentName:"ul"},"Body: ",(0,o.kt)("inlineCode",{parentName:"li"},"(string|number)[][]"))),(0,o.kt)("p",null,"Similarly to ",(0,o.kt)("a",{parentName:"p",href:"#onCellUpdate"},(0,o.kt)("inlineCode",{parentName:"a"},"onCellUpdate"))," this is triggered when any cell is updated - however this property returns the full table contents 2D array instead."),(0,o.kt)("h4",{id:"example-1"},"Example"),(0,o.kt)(p,{propertyname:"onContentUpdate",mdxType:"TableContainerEvents"},(0,o.kt)(s.Z,{content:[["Planet","Diameter","Mass","Moons","Density"],["Earth",12756,5.97,1,5514],["Mars",6792,.642,2,3934],["Jupiter",142984,1898,79,1326],["Saturn",120536,568,82,687],["Neptune",49528,102,14,1638]],tableStyle:{width:"100%",boxShadow:"rgb(172 172 172 / 17%) 0px 0.5px 1px 0px",borderRadius:"2px"},mdxType:"ActiveTable"})),(0,o.kt)(k.Z,{mdxType:"Tabs"},(0,o.kt)(c.Z,{value:"js",label:"Function",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-html"},"tableElementRef.onContentUpdate = (contentUpdate) => { console.log(contentUpdate); };\n"))),(0,o.kt)(c.Z,{value:"py",label:"Event",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-html"},"\x3c!-- This example is for Vanilla JS and should be tailored to your framework (see Examples) --\x3e\n\ntableElementRef.addEventListener('content-update', (contentUpdate) => { console.log(contentUpdate.detail); });\n")))),(0,o.kt)(m.Z,{mdxType:"LineBreak"}),(0,o.kt)("h3",{id:"onColumnsUpdate"},(0,o.kt)("inlineCode",{parentName:"h3"},"onColumnsUpdate")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Function: (",(0,o.kt)("inlineCode",{parentName:"li"},"columnsUpdate:")," ",(0,o.kt)("inlineCode",{parentName:"li"},"Body"),") => ",(0,o.kt)("inlineCode",{parentName:"li"},"void")),(0,o.kt)("li",{parentName:"ul"},"Event: ",(0,o.kt)("inlineCode",{parentName:"li"},"columns-update")),(0,o.kt)("li",{parentName:"ul"},"Body: ",(0,o.kt)("a",{parentName:"li",href:"./sharedTypes#ColumnsDetails"},(0,o.kt)("inlineCode",{parentName:"a"},"ColumnsDetails")))),(0,o.kt)("p",null,"Triggered when column details are updated. This is particularly useful if the user has made changes to columns and you want to recreate them\nin the next session on the initial load."),(0,o.kt)("h4",{id:"example-2"},"Example"),(0,o.kt)(p,{propertyname:"onColumnsUpdate",mdxType:"TableContainerEvents"},(0,o.kt)(s.Z,{content:[["Planet","Diameter","Mass","Moons","Density"],["Earth",12756,5.97,1,5514],["Mars",6792,.642,2,3934],["Jupiter",142984,1898,79,1326],["Saturn",120536,568,82,687],["Neptune",49528,102,14,1638]],tableStyle:{width:"100%",boxShadow:"rgb(172 172 172 / 17%) 0px 0.5px 1px 0px",borderRadius:"2px"},mdxType:"ActiveTable"})),(0,o.kt)(k.Z,{mdxType:"Tabs"},(0,o.kt)(c.Z,{value:"js",label:"Function",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-html"},"tableElementRef.onColumnsUpdate = (columnsUpdate) => { console.log(columnsUpdate); };\n"))),(0,o.kt)(c.Z,{value:"py",label:"Event",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-html"},"\x3c!-- This example is for Vanilla JS and should be tailored to your framework (see Examples) --\x3e\n\ntableElementRef.addEventListener('columns-update', (columnsUpdate) => { console.log(columnsUpdate.detail); });\n")))))}T.isMDXComponent=!0}}]);