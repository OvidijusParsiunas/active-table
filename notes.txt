update homepage property in package

detect React:
!!Object.keys(document).find(key => key.includes('react'))

when tabbing across cells, need the cursor to automatically point towards the end of the text

add the following eslint and prettier rule:
"@typescript-eslint/prefer-readonly": "error",
This will require parserServives it work

Could potentially use web workers to speed up processing

STRATEGY:

REF-1
cellStyle will only override the borders of inner table structure and not the outside of the table
These have been overriden in the css using !import
The reason for this is because the use of custom border left or border right styles would leave one of the side borders uncovered
and the use of both would result in thick middle borders
For the table borders to be set, use tableStyle

REF-2
contentEditable does not display the caret correctly in shadow dom in FireFox all the time and on initial mouse down on text
element in the Safari browser
the workaround is to set contentEditable every time the data cell is focused
alternatively can refactor cells to be inputs
https://pablo.berganza.dev/blog/shadow-dom-firefox-contenteditable/

REF-3
When customTextProcessing and textValidation both exist, textValidation will validate text after it has been processed and will
determine if it needs to be set back to default and additionally overwrite the cell style with failedStyle if required.

REF-4
Identified an issue where the scrollIntoView does not scroll down far enough to an element for it to be fully visible when
there is a horizontal scroll bar as it is partially covered by it. This appears to only happen when the parent element
(cell dropdown) is displayed and we immediately proceed to scroll to an element.
The workaround for this is to identify that there is a horizontal scroll bar and programmatically scroll further down

REF-5
Trying to limit column types that use cells with text because they carry padding and if one cell with text contains a lot of text
and is resultantly very high, the text elements in the same row which do not contain that much text and are inherently shorter,
would have white space fill up the rest of their cell's height.
If the user would click on that whitespace, the text editor caret would focus on the left of the text which looks bad.
Fortunately this can be fixed by shadowRoot.getSelection, however this is not available to all browsers. Hence, because
the UX cannot be good for all browsers, the table will continue to use plane text within its data cells to have as much
of a better user experience as possible. It is true that in those instances the limitation will still be there when
select/date cells are used, but at least it will only be problematic in those specific cells.

REF-6
Knowing that data cell elements contain a text node and select/label cells contain a text element with a text node inside,
the .innerText grabs the text when used on the cell or the text element for all cases (CAUTION-1 when not to trim it)

REF-7
Because there is no way in firefox to distinguish if element focus was fired by tab key, the cellKeyEventState is used
to hold temporary state to indicate this. Primarily used to decide whether move caret via the setToEndOfText method

REF-8
The reason why there is one cell dropdown per column is because each one contains unique items for it. Hence it
is inefficient to repopulate the dropdown every time it is clicked on a different column cell.

REF-9
Relative positioning does not work on tbody in safari which causes absolute elements to use the screen

REF-10
SVG elements are constructed by parsing a string instead of using an actual file. This is because I did not want to introduce extra
plugins and bundling complexity for adding SVGs into the resultant bundle
Additionally not using the lit element way for inserting svg templates as it has been considered to potentially stop using lit
element and instead go native, hence the current approach of parsing a string will make it easier if moving to that direction
However if opted to stay with lit element - use the following approach: https://lit.dev/docs/api/templates/#svg

REF-11
Because the table is re-rendered when the user changes the parent width - the column width setting process has been optimised.
This has lead to a relatively complex code flow to only trigger the changeWidthsBasedOnColumnInsertRemove method once:
When maxWidth is set and narrow columns are not preserved - we must set the display style to 'block' in order for the table offset
to have the exact width as the temporarily set css width - otherwise the addition of initial columns will increase the table width
by 100 (default width) for each column and stop the canAddMore check from returning false as column widths will be above minimum.
(Executing changeWidthsBasedOnColumnInsertRemove after each column addition would prevent this but we do not want to execute
it every time for optimization)
(This is also why the display is set to 'block' when the client has set a specific width).
Finally, this is why we have the isNewText check in the InsertNewCell class and instead calling changeWidthsBasedOnColumnInsertRemove
once inside the TableElement class.

REF-12
The original architecture of a column sizer (known as the resizer to the user) allowed it to change the column width as it was moving,
however this was deemed too computationaly expensive when the table had many rows as the render speed was very slow, hence it was
rebuilt to only change column width once the user triggers a mouse up event.

Anatomy of a column sizer :
|               |       |        || |         | |           ||
|               |       |        || |         | |           ||
| cell divider  | sizer | filler || | overlay | |  movable  ||
|               |       |        || |         | |           ||
|               |       |        || |         | |           ||
|               |       |        || |         | |           ||

A cell divider contains a sizer and 2 other sizer related components that help it perform the functionality that it requires
The sizer element itself contains a filler element which is used to prevent a bug where during the entrance animation - the cell
border tends to bleed out onto the middle of the sizer causing its color to be visible
The sizer element itself does not have any events and all of them are actually performed on the sizer overlay. The reason for this
is because by default the sizer width is short, hence when the user tries to hover over it to have it expand - the area of hover
is actually really small and it may sometimes be hard to hover over it - this is where the overlay comes in and triggers the hover
event before the sizer element is actually reached - thus allowing better experience for the user.
The movable sizer element is the element that follows the cursor whilst the actual sizer element remains static in its position

REF-13
The process of adding adding a new column details object (ColumnDetailsT):
First creating the initial object with just the properties that are required immediately when the header cell is created. Then in
a timeout - asynchronously adding all the other necessary details except the sizer as its creation requires column details. Later
proceeding to create the sizer and adding it to the object, thus completing the creation of the column details object.

REF-14
When calling super.connectedCallback() in the 'override connectedCallback' method - Firefox was initially found to call
the 'override render' twice - where the first render did not have the popylated properties that were passed by client.
This has been prevented by calling super.connectedCallback() inside a timeout.

REF-15
It has been identified that when contentEditable is changed, chrome can fire a blur event on text. This was problematic for
a situation when column settings were changed after a header text change during multi row data paste, so when prepContentEditable
was being called and blur was fired, the focusedElements object would lose the cell reference. I have edited the code to
work around this use case, however if there are problems in the future, will need to set the chrome contentEditable change
in the prepContentEditable method into a timeout. Additionally all other contentEditable changes will also need to be
placed inside timeouts as their changes need to take affect after that method's timeout execution because when a new
cell is created, all cell elements are immediately assumed to be text type (pre-conversion) and are set with contentEditable
as true via prepContentEditable.

REF-16
In Chrome/Firefox: it has been identified that when there is no width set on the table - the default html does not allow the table
to expand beyond the parent limits (increase the parent width) and instead automatically reduces the column widths. This is
problematic as the widths are no longer what they are set to by the component and the resize functionality no longer works as
intended, hence the table-controlled-width class allows the table to expand the parent element and keep the intended column widths
This behaviour is still permitted when preserveNarrowColumns is set to true.
In Safari: This also serves as a fix for Safari table width bug and the table width no longer needs to be set for this browser.
Reference to this commit to undo anything that has been changed: 2fd86cd84f88d19e8a4a8a95c6b73e4fe181ad13
Snippet from a previous Ref:
(Safari has a bug where column widths for cell elements that contain wrapped text (text that oveflows the width) is increased to what
the width would be without the wrapping. This can be fixed by programmatically setting the table width based on the column widths.
I have raised a stack overflow question to see if this can be fixed automatically via plain css without a manual workaround:
https://stackoverflow.com/questions/73920147/table-element-width-using-column-widths-safari)

REF-17
The add column cell/button is made up of cells (one for each row in the table). The hover highlight functionality has been optimised
to not traverse all of the cells and highlight them individually (as that would be computationally expensive if there are many rows)
and instead utilise the column group element to control its highlight.
In order for column group column background color toggle to work - the style must only be set on the col element and not on the cell
elements. An exception to this is the header cell as first of all column group cannot control the 'color' property and secondly
because auxiliary header elements can inherit the user set header style we must always be manually setting the header style.
Column group is EXCLUSIVELY used for controlling the add column cells' style.

REF-18
The add row button is always in the table body and is converted into a no content stub and reconverted after it is clicked on.
The reasonings for this are explained here:
When there are no cells in the table, we display a stub element that the user can use to add the first element of the table.
The original idea was to have the column add cell act as the stub when it is set to be displayed or add new row cell to act when
the column is not displayed etc. However this idea was dismissed due to the code complexity this required as we needed code to
set and unset both of the cells' styles and have them work with the toggle logic for the max numbers. The second idea was to
use a standalone cell button that would independently appear when the table had no content and would hide when content was
added again. This originally worked, but the logic behind displaying it and keeping the other cells hidden grew in complexity.
I then realised that this cell had an onclick event that would add a new row (a new column after no cells cannot be added)
which was pretty much just like the add new row button, so why really have another standalone cell if we can just reuse
the add new row button exclusively. Hence this is why the add row button is always present within the table body and all we do
is convert its style to a stub when there are no content and set it back to normal or hide it when the content are added.

REF-19
When the index column is too wide (and narrow columns are not preserved) - the table body will actually be increased over the size
of the table as the initial columns that have been added when the index column had a default width can no longer be removed. To
prevent this we reduce the index column back to its default width by allowing its numbers to wrap. Please note that unwrapping
detection is not supported and once the index column is wrapped it will stay in this form for the rest of the session.
If the table needs to be re-rendered due to resizing, we use the isColumnIndexCellTextWrapped state to check was it wrapped before
and if it was we wrap the index column from the getgo.
When preserveNarrowColumns is set to true and the table exceeds the set width, the column is set to wrap.
The client also has the ability to set the column to wrap all the time by using the wrapIndexCellText flag.

REF-20
onCellUpdate is specifically designed to help maintain a data object in the parent application and IS NOT meant to be used like
an alert notification system to report what has been specifically removed or added. The reason for this is because the update
messages that are sent don't actually describe the particular cells that have been removed/added are and instead describe what
changes need to be made to the outside data object in order for it to be the same as the data object (content) in this component.
Example:
When there are 5 rows and 5 columns, and row number 3 gets removed - the messages that are sent out do not say that row 3 cells
were removed and instead they will say that row 3 cells were updated, row 4 was updated ad row 5 was the one that was removed.
Reasons for implementing onCellUpdate this way:
1. This allows the shadow component to be 100% clear on what happens inside it when a certain part of the table object is
manipulated and how the changes should be made on the parent object to keep it the same as API consumers can take the wrong path
of implementing their array splice functionality incorrectly which would leave their objects out of sync.
2. In state management solutions such as Redux - reducers should be pure functions and not something that would maintain existing
state. Hence incentivising users to implement array splicing and addition logic for state manipulation is something that we want
to avoid.
3. The simplicty, messages that are sent out denote exactly what cells need to be changed and not making the user solve the problem
of what else needs to be changed when one has been deleted/inserted at a particular table index. Hence, they should do exactly what
the messages tell them to and absolutely nothing else.

REF-21
When manually increasing the width of a column and the next columns have widths higher than their minWidth setting, those column
widths will not be reduced because it has been concluded that the calculation to identify the limit of how much the current cell
can be expanded to the right and the effort that will be required to resize those proceeding columns is not worth the value that
will ultimately be provided. However, if users are requesting this functionality, implement its logic as needed.

REF-22
Using auxiliaryTableContentInternal object because the client may choose not to include some properties inside the auxiliaryTableContent
object such as any of the AuxiliaryTableContentDisplayProps. Hence, this object is used to contain the defaults and use them internally
without having to add optional chaining every its used.

REF-23
If a cell with a border style that was set in the cellStyle property is beside a column that has a border set by customColumnsSettings
property (cellStyle), their borders will be displayed side by side which does not look appealing. Hence, we unset (0px) the border of
the cell without the customColumnsSettings border style to make the one with the custom settings border dominant.
If there are two columns with customColumnsSettings border styles, the right column will be dominant.
We also do this for auxiliary element borders.

REF-24
When the table width/maxWidth is set and there are columns with set widths that exceed the table width, those widths can cause the table
to exceed the set width. The reason for this is because it is relatively complex to identify when the table width will be exceeded and
what to accordingly resize, prevent the addition of or change of to keep the width within the set bound. This can be furtehr worked on
in the future, but for now API users that do have this configuration should be careful what column widths are set and to preferably
disable the use of duplicate headers.
Currently the add column button disappears when the table size is exceeded, but this comes at a cost of not allowing any further columns
to be added (incl. render) even when preserveNarrowColumns is true.

REF-25
Given that the add new row button is not always visible and there is no css selector that can identify the last visible row, we manually
mark the last visible row with an id. This is done to not display bottom border if last row cells contain one in their style settings.

REF-26
To insert a header row when there is an existing one - we create a new row below it and move the content of the header row to it.
The reason for this approach is not to have to create a new row with <td> elements and sizers.

REF-27
To remove a header row when there is data below the header, we swap the header row with the below data row and then remove the data row.
The reason for this approach is not to have to create a new row with <td> elements and sizers.

REF-28
Default column type dropdown items are created after the DEFAULT_TYPES config has been initialised because the creation logic is
not immediately available on startup (cannot use it in the DEFAULT_TYPES variable) and additionally the items are not needed on
the initial table render.

REF-29
Safari does not support the focus of a checkbox, therefore we do not focus it's cell for that browser when tabbing

REF-30
When new buttons are being created in pagination during a shift and the mouse is over a new button - the mouse enter event
does not get triggered, hence we need to apply it programmatically. Because it is set in PaginationButtonElement.setActive
method, the shift can be triggered by side buttons and row events, hence we need a way to identify if it was activated
via number click events. Passing down an indicator via parameters would have complicated the code too much, hence I opted
for an easier solution to hold temporary state of when a number button has been clicked. 

REF-31
When a pagination button style is programmatically set to hover, sometimes the pagination button container shifts upwards/downwards
when a new row is inserted or older is removed, hence the mouse is no longer on a button and the style should not be applied.

REF-32
When pagination is enabled along with striped rows and add new row cell displayed - the add new row element can sometimes have
the same style as the row above due to the fact that its style was set based on the position of all rows and not where it is
in the current page (due to rows being hidden). To fix this we set the add new row element to have a consistent style. Because
this issue also affects the header element when there is an odd number of visible rows allowed, we change the allowed row number
to be even to make sure that no sibling rows are same.

REF-33
Cell event setters have been optimized to only be called when a column type is set or when a new cell is being inserted - instead of
setting events on the conversion of each cell. The reason for that is after a cell is created, the events are set again in
CellEventsReset method, hence remvoving redundant call.

REF-34
To make sure that label colors vary, each label type contains a starter array of predefined colors which will be used before random
ones are going to be generated.

REF-35
The reason why we do not store column widths in the column details state is because there are multiple areas that affect them and
they overwrite the elements by traversing the table or having a direct reference to the cell element instead, hence the logic
would need a hard rewrite to track each and every column that has its width changed.
This is also why we update the column widths separately in the onColumnWidthsUpdate method and display all columns instead.

REF-36
If custom column settings do not use minWidth/width in their cellStyle (or is a fresh new column) and default settings do use minWidth,
we add it to the internal settings minWidth property so it would be treated as part of static width and prevent the column from being
resized to smaller width.
If default column setting is instead just width, we simply set the column header width so it can be resized.
Because all dimension styles are removed from cellStyles for settings except 'width' for default settings, we take advantage of that
and allow the cells to both have a minWidth static style and a width - which can be resized as desired.

REF-37
When the header is sticky and the overflow is not coming from the table, but the parent element - upon scrolling the table - header row
looks weird when the table has a border-top and it does not. To fix this we have moved border-top from the table to the table body
to not have it displayed and use inheritance via selectors to set it on the header cells instead.

CAUTION-1
The returned string from textElement.innerText.trim() should not be used to set text on another cell as innerText/textContent property
does not just return the cell text but additionally the new line chars (\n) which represent <br> elements within the cell and .trim()
removes them, hence using this to set text on another cell will set it without the important <br> elements which will make it difficult
to programmatically set the pointer position on that cell
The reason why trim() is used is because the new line characters make it difficult to compare cell text to an actual string or use it
for other programmatic needs.

CAUTION-2
When resizing the table, take note of some async code that was waiting to be executed before the resize was triggered:
It has been identified that when re-render occurs and columnsDetails object is cleared, by the time the async code is executed
the columnDetails objects will have some properties populated inside the ColumnDetailsInitial type (REF-13), however they will
not have all properties which we can use to check if re-rendering has occured, and if it has - stop any async processing that
has been initiated before the re-render.
If further bugs occur - create and use a 'rendering' flag instead.

CAUTION-3
Table dimensions have exclusive optional interfaces that are exposed to the client, however they may not be respected, hence the logic
needs to be cautious when handling the passed in object

CAUTION-4
Do not set state/property variables after render has occurred as it will trigger full component re-render
Be careful when assigning element references and instead do them in the connectedCallback method

Accepted behaviour

When a table column is squished - the increased height can create a scrollbar in the parent - this will trigger a re-render in the table
and cause the column widths to be reset (or be even smaller if using maxWidth as the new re-render is using the new table width that may
not breach the maxWdith threshold). Because we do not record column widths in-state, there is currently no way to track back what the
original widths were and they will be forced to reset.
TO-DO can potentially keep track of the column widths and reset them correctly in the future
