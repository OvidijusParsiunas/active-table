update homepage property in package

detect React:
!!Object.keys(document).find(key => key.includes('react'))

when tabbing across cells, need the cursor to automatically point towards the end of the text

add the following eslint and prettier rule:
"@typescript-eslint/prefer-readonly": "error",
This will require parserServives it work

Could potentially use web workers to speed up processing

STRATEGY:

REF-1
cellStyle will only override the borders of inner table structure and not the outside of the table
These have been overriden in the css using !import
The reason for this is because the use of custom border left or border right styles would leave one of the side borders uncovered and the use of both would
result in thick middle borders
For the table borders to be set, use tableStyle

REF-2
contentEditable does not display the caret correctly in shadow dom in FireFox
the workaround is to set contentEditable every time the data cell is focused
alternatively can refactor cells to be inputs
https://pablo.berganza.dev/blog/shadow-dom-firefox-contenteditable/

REF-3
editable table component supports 2 date formats - d/m/y and m/d/y
to automatically infer which one to use we need to keep track of number of dates that apply to both we use the AllDateFormats
property. This prevents us from having to increment and decrement both d/m/y and m/d/y format properties which would would
heavily complicate the changeTypeAndSetColumnType method logic (as there are other formats such as number which applies
both to text and number, hence it would probably also have to be incremented/decrement for both for consistency).
The validation logic first checks the d/m/y and immediately returns it if it is valid, the parseType method additionally
checks if the cell value applies to m/d/y as well and if it does, it sets the format as 
Currently the primary date format is d/m/y so if all cells apply to both formats, that is the format that will be used

REF-4
Identified an issue where the scrollIntoView does not scroll down far enough to an element for it to be fully visible when
there is a horizontal scroll bar as it is partially covered by it. This appears to only happen when the parent element
(category drodpwon) is displayed and we immediately proceed to scroll to an element.
The workaround for this is to identify that there is a horizontal scroll bar and programmatically scroll further down

REF-5
Category cells are the only ones that contain div text elements as they are needed to set the background color. The reason
why all cells do not contain a text element instead of a text node - which would tramendously simplify the complexity of
the text set/get logic in the app is because a text element within a cell has a drawback:
If one cell contains a lot of text and is resultantly very high, the text elements in the same row which do not contain that
much text and are inherntly shorter, would have white space fill up the rest of their cell's height.
If the user would click on that whitespace, the text editor caret would focus on the left of the text which looks bad.
Fortunately this can be fixed by shadowRoot.getSelection, however this is not available to all browsers. Hence, because
the UX cannot be made good for all browsers, the table will continue to use plane text within its data cells to have as
much of a better user experience as possible. It is true that in those instances the limitation will still be there when
category cells are used, but at least it will only be problematic in those specific cells.

REF-6
Knowing that data cell elements contain a text node and category cells a text element with a text node inside,
the .textContent grabs the text when used on the cell or the text element for all cases

REF-7
Because there is no way in firefox to distinguish if element focus was fired by tab key or mouse down, the cellKeyPressState
is used to hold temporary state to indicate this. Primarily used to decide whether move caret via the setToEndOfText method

REF-8
The reason why there are multiple category dropdowns is because each one contains multiple items dependant on the column it
is on. Hence it is very inefficient to repopulate the dropdown when it is clicked on a different column cell.